"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/apollo-server-errors";
exports.ids = ["vendor-chunks/apollo-server-errors"];
exports.modules = {

/***/ "(rsc)/./node_modules/apollo-server-errors/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/apollo-server-errors/dist/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.formatApolloErrors = exports.UserInputError = exports.PersistedQueryNotSupportedError = exports.PersistedQueryNotFoundError = exports.ForbiddenError = exports.AuthenticationError = exports.ValidationError = exports.SyntaxError = exports.fromGraphQLError = exports.toApolloError = exports.ApolloError = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nclass ApolloError extends Error {\n    constructor(message, code, extensions) {\n        super(message);\n        if (!this.name) {\n            Object.defineProperty(this, 'name', { value: 'ApolloError' });\n        }\n        if (extensions === null || extensions === void 0 ? void 0 : extensions.extensions) {\n            throw Error('Pass extensions directly as the third argument of the ApolloError constructor: `new ' +\n                'ApolloError(message, code, {myExt: value})`, not `new ApolloError(message, code, ' +\n                '{extensions: {myExt: value}})`');\n        }\n        this.extensions = { ...extensions, code };\n    }\n    toJSON() {\n        return (0, graphql_1.formatError)(toGraphQLError(this));\n    }\n    toString() {\n        return (0, graphql_1.printError)(toGraphQLError(this));\n    }\n    get [Symbol.toStringTag]() {\n        return this.name;\n    }\n}\nexports.ApolloError = ApolloError;\nfunction toGraphQLError(error) {\n    return new graphql_1.GraphQLError(error.message, error.nodes, error.source, error.positions, error.path, error.originalError, error.extensions);\n}\nfunction enrichError(error, debug = false) {\n    var _a, _b, _c;\n    const expanded = Object.create(Object.getPrototypeOf(error), {\n        name: {\n            value: error.name,\n        },\n        message: {\n            value: error.message,\n            enumerable: true,\n            writable: true,\n        },\n        locations: {\n            value: error.locations || undefined,\n            enumerable: true,\n        },\n        path: {\n            value: error.path || undefined,\n            enumerable: true,\n        },\n        nodes: {\n            value: error.nodes || undefined,\n        },\n        source: {\n            value: error.source || undefined,\n        },\n        positions: {\n            value: error.positions || undefined,\n        },\n        originalError: {\n            value: error.originalError,\n        },\n    });\n    expanded.extensions = {\n        ...error.extensions,\n        code: ((_a = error.extensions) === null || _a === void 0 ? void 0 : _a.code) || 'INTERNAL_SERVER_ERROR',\n        exception: {\n            ...(_b = error.extensions) === null || _b === void 0 ? void 0 : _b.exception,\n            ...error.originalError,\n        },\n    };\n    delete expanded.extensions.exception.extensions;\n    if (debug && !expanded.extensions.exception.stacktrace) {\n        const stack = ((_c = error.originalError) === null || _c === void 0 ? void 0 : _c.stack) || error.stack;\n        expanded.extensions.exception.stacktrace = stack === null || stack === void 0 ? void 0 : stack.split('\\n');\n    }\n    if (Object.keys(expanded.extensions.exception).length === 0) {\n        delete expanded.extensions.exception;\n    }\n    return expanded;\n}\nfunction toApolloError(error, code = 'INTERNAL_SERVER_ERROR') {\n    let err = error;\n    if (err.extensions) {\n        err.extensions.code = code;\n    }\n    else {\n        err.extensions = { code };\n    }\n    return err;\n}\nexports.toApolloError = toApolloError;\nfunction fromGraphQLError(error, options) {\n    const copy = (options === null || options === void 0 ? void 0 : options.errorClass)\n        ? new options.errorClass(error.message)\n        : new ApolloError(error.message);\n    Object.entries(error).forEach(([key, value]) => {\n        if (key === 'extensions') {\n            return;\n        }\n        copy[key] = value;\n    });\n    copy.extensions = {\n        ...copy.extensions,\n        ...error.extensions,\n    };\n    if (!copy.extensions.code) {\n        copy.extensions.code = (options === null || options === void 0 ? void 0 : options.code) || 'INTERNAL_SERVER_ERROR';\n    }\n    Object.defineProperty(copy, 'originalError', { value: {} });\n    Object.getOwnPropertyNames(error).forEach((key) => {\n        Object.defineProperty(copy.originalError, key, {\n            value: error[key],\n        });\n    });\n    return copy;\n}\nexports.fromGraphQLError = fromGraphQLError;\nclass SyntaxError extends ApolloError {\n    constructor(message) {\n        super(message, 'GRAPHQL_PARSE_FAILED');\n        Object.defineProperty(this, 'name', { value: 'SyntaxError' });\n    }\n}\nexports.SyntaxError = SyntaxError;\nclass ValidationError extends ApolloError {\n    constructor(message) {\n        super(message, 'GRAPHQL_VALIDATION_FAILED');\n        Object.defineProperty(this, 'name', { value: 'ValidationError' });\n    }\n}\nexports.ValidationError = ValidationError;\nclass AuthenticationError extends ApolloError {\n    constructor(message, extensions) {\n        super(message, 'UNAUTHENTICATED', extensions);\n        Object.defineProperty(this, 'name', { value: 'AuthenticationError' });\n    }\n}\nexports.AuthenticationError = AuthenticationError;\nclass ForbiddenError extends ApolloError {\n    constructor(message, extensions) {\n        super(message, 'FORBIDDEN', extensions);\n        Object.defineProperty(this, 'name', { value: 'ForbiddenError' });\n    }\n}\nexports.ForbiddenError = ForbiddenError;\nclass PersistedQueryNotFoundError extends ApolloError {\n    constructor() {\n        super('PersistedQueryNotFound', 'PERSISTED_QUERY_NOT_FOUND');\n        Object.defineProperty(this, 'name', {\n            value: 'PersistedQueryNotFoundError',\n        });\n    }\n}\nexports.PersistedQueryNotFoundError = PersistedQueryNotFoundError;\nclass PersistedQueryNotSupportedError extends ApolloError {\n    constructor() {\n        super('PersistedQueryNotSupported', 'PERSISTED_QUERY_NOT_SUPPORTED');\n        Object.defineProperty(this, 'name', {\n            value: 'PersistedQueryNotSupportedError',\n        });\n    }\n}\nexports.PersistedQueryNotSupportedError = PersistedQueryNotSupportedError;\nclass UserInputError extends ApolloError {\n    constructor(message, extensions) {\n        super(message, 'BAD_USER_INPUT', extensions);\n        Object.defineProperty(this, 'name', { value: 'UserInputError' });\n    }\n}\nexports.UserInputError = UserInputError;\nfunction formatApolloErrors(errors, options) {\n    if (!options) {\n        return errors.map((error) => enrichError(error));\n    }\n    const { formatter, debug } = options;\n    const enrichedErrors = errors.map((error) => enrichError(error, debug));\n    const makePrintable = (error) => {\n        if (error instanceof Error) {\n            const graphQLError = error;\n            return {\n                message: graphQLError.message,\n                ...(graphQLError.locations && { locations: graphQLError.locations }),\n                ...(graphQLError.path && { path: graphQLError.path }),\n                ...(graphQLError.extensions && { extensions: graphQLError.extensions }),\n            };\n        }\n        return error;\n    };\n    if (!formatter) {\n        return enrichedErrors;\n    }\n    return enrichedErrors.map((error) => {\n        try {\n            return makePrintable(formatter(error));\n        }\n        catch (err) {\n            if (debug) {\n                return enrichError(err, debug);\n            }\n            else {\n                const newError = fromGraphQLError(new graphql_1.GraphQLError('Internal server error'));\n                return enrichError(newError, debug);\n            }\n        }\n    });\n}\nexports.formatApolloErrors = formatApolloErrors;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/apollo-server-errors/dist/index.js\n");

/***/ })

};
;